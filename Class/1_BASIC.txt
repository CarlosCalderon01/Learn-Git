COMPONENTS OF GITS: //----------//----------//----------//----------//----------//

Working Directory --> Staging Area --> Committed Files --> Remote Repository (Server)


//----------//----------//----------//----------//----------//----------//----------//
//----------//----------// GIT-BASIC - COMMANDS FOR REPOSITORY //----------//----------//
//----------//----------//----------//----------//----------//----------//----------//

    CONTENT -> GIT { INIT , CLONE }

        1-) git init --> Create new repository in actual directory.

        2-) git init [file] --> Create new repository in new directory.

        3-) git clone [URL HTTPS] --> Descarga el repositorio.

    CONTENT -> GIT { STATUS , ADD , COMMIT , PUSH }

        1-) git status --> ofrece una descripción del estado de los archivos
                (untracked, ready to commit, nothing to commit).

        2-) git add [file || .]: añade los archivos especificados al área de preparación (staging).

        3-) git commit -m “[commit description]”: confirma los archivos que se encuentran
                en el área de preparación y los agrega al repositorio.

        4-) git push [name][branch] --> Committed Files Save In Remote Repository

//----------//----------//----------//----------//----------//----------//----------//

    CONTENT -> GIT { CHECKOUT , BRANCH }

    1-) git checkout <commit/branch> <filename>: permite regresaral estado en el cual se realizó
            un commit o branch especificado, pero no elimina lo que está en el staging area.

    2-) git checkout --<filePath>: deshacer cambios en un archivo en estado modified
            (que ni fue agregado a staging)

    3-) git branch: crear una nueva rama.

    4-) git push origin --delete calderon: --> 

//----------//----------//----------//----------//----------//----------//----------//

    CONTENT -> GIT { FETCH , MERGE , PULL }

    1-) git fetch --> traer actualizaciones del servidor remoto y guardarlas en nuestro
            repositorio local.

    2-) git merge: tiene dos usos. Uno es la fusión de ramas, funcionando como un commit
            en la rama actual, trayendo la rama indicada. Su otro uso es guardar
            los cambios de un servidor remoto en nuestro directorio.

        git merge --abort: Cómo revertir un merge
        
    3-) git pull: fetch y merge al mismo tiempo.

//----------//----------//----------//----------//----------//----------//----------//

//----------//----------//----------//----------//----------//----------//----------//
//----------//----------// GIT-BASIC - COMMANDS FOR REPOSITORY //----------//----------//
//----------//----------//----------//----------//----------//----------//----------//

    CONTENT -> GIT { RM , RESET }

    1-) git rm (. -r, filename) (--cached): remueve los archivos del index.

    2-) git rm --cached <archivo/s>: elimina los archivos en staging pero
            los mantiene en el disco duro.

    3-) git rm --force <archivo/s>: elimina los archivos de git y del disco duro.
        
    1-) git reset <commit> --soft: regresa al commit especificado, eliminando
            todos los cambios que se hicieron después de ese commit.

    1.1-)   git reset <commit> --hard: todo vuelve a su versión anterior

    2-) git reset [Id_Git] --soft: vuelve a la versión en el repositorio, pero
            guarda los cambios en staging. Así, podemos aplicar actualizaciones
            a un nuevocommit.

    3-) git reset [Id_Git] --hard: Borra absolutamente todo. Toda la información de los commits
            y del área de staging se borra del historial.

    4-) git reset HEAD: saca los cambios de staging, pero no los borra. Es lo opuesto a git add.

    CONTENT -> GIT {SHOW, DIFF, SHORTLOG}

    1-) git show filename: permite ver la historia de los cambios en un archivo.

    2-) git diff <commit1> <commit2>: compara diferencias entre en cambios confirmados.
    
    3-) git shortlog: Indica que commits ha realizado un usuario, mostrando el usuario y el título de sus commits.


//----------//----------//----------//----------//----------//----------//----------//
//----------//----------// GIT-BASIC - COMMANDS FOR REPOSITORY //----------//----------//
//----------//----------//----------//----------//----------//----------//----------//
